üß© PRD ‚Äî Funcionalidad: Pagos con Stripe para Suscripciones Premium

üéØ Objetivo

Permitir que los usuarios de la aplicaci√≥n puedan:
‚Ä¢ Suscribirse a un plan mensual o anual mediante Stripe.
‚Ä¢ Acceder a una prueba gratuita de 14 d√≠as (freemium).
‚Ä¢ Gestionar su suscripci√≥n (cancelar cuando lo deseen).
‚Ä¢ Desbloquear funcionalidades ‚ÄúPremium‚Äù si su estado lo permite.

‚∏ª

üß† Contexto General de la App

La aplicaci√≥n permite a creadores de contenido conectar con su audiencia a trav√©s de leaderboards de ideas.
Actualmente implementa:
‚Ä¢ Registro, login y recuperaci√≥n de contrase√±a
‚Ä¢ Creaci√≥n y visualizaci√≥n de ideas
‚Ä¢ Votaci√≥n por parte de la audiencia
‚Ä¢ Sugerencias de ideas desde la audiencia y su gesti√≥n
‚Ä¢ Perfil p√∫blico con ranking de ideas
‚Ä¢ Personalizaci√≥n b√°sica del perfil

Stack actual:
‚Ä¢ Next.js App Router
‚Ä¢ TypeScript
‚Ä¢ TailwindCSS
‚Ä¢ shadcn/ui (para UI components)
‚Ä¢ Login habilitado
‚Ä¢ Persistencia mediante una API (sin backend real declarado)

‚∏ª

üß† Contexto Espec√≠fico de la Funcionalidad

La funcionalidad de pagos con Stripe debe permitir:
‚Ä¢ Mostrar un selector (toggle) entre suscripci√≥n mensual y anual.
‚Ä¢ Al hacer clic en ‚ÄúSuscribirme‚Äù, el usuario debe ser redirigido a Stripe Checkout.
‚Ä¢ Una vez que el pago se confirma, debe volver a la app con su cuenta marcada como ‚ÄúPremium‚Äù.
‚Ä¢ El usuario Premium accede a funcionalidades restringidas (por ejemplo: m√°s slots de ideas, analytics, opciones extra de personalizaci√≥n, etc.).
‚Ä¢ Mostrar una opci√≥n para cancelar la suscripci√≥n desde su dashboard.
‚Ä¢ Soportar una prueba gratuita de 14 d√≠as, que se activa al crear la cuenta o al intentar pagar sin haber usado el trial antes.
‚Ä¢ Si el usuario no paga al final del per√≠odo de prueba, pierde acceso a las funcionalidades premium.

‚∏ª

üì¶ Requisitos T√©cnicos y Entregables

‚úÖ 1. Descripci√≥n detallada del proceso de implementaci√≥n
1. Crear un toggle UI (mensual / anual) con shadcn (Switch o RadioGroup).
2. Usar un bot√≥n ‚ÄúSuscribirme‚Äù que, al hacer clic, llame a un endpoint /api/stripe/create-checkout-session enviando el plan elegido.
3. Redirigir a Stripe Checkout con window.location = session.url.
4. Stripe redirige de vuelta a una ruta /subscription-success (o fallo a /subscription-cancel).
5. Al confirmar la suscripci√≥n, llamar a la API de la app para actualizar el estado del usuario a premium: true.
6. Guardar el estado de la suscripci√≥n en contexto de usuario (useUser o similar).
7. Mostrar una opci√≥n de ‚ÄúCancelar Suscripci√≥n‚Äù en el panel del usuario (llamar a /api/stripe/cancel-subscription).
8. Detectar si el usuario tiene una prueba activa o no, usando un campo como hasUsedTrial.

‚úÖ 2. Componente React con TypeScript

Debe incluir:
‚Ä¢ Un formulario visual con shadcn para elegir plan y activar suscripci√≥n.
‚Ä¢ Mostrar el estado actual del usuario (Premium, Trial activo, Free) y el bot√≥n correspondiente.
‚Ä¢ Mostrar mensajes de √©xito/error.

‚úÖ 3. TailwindCSS para estilos
‚Ä¢ Usar clases de Tailwind para espaciado, tipograf√≠a y colores.
‚Ä¢ Compatible con dark mode.
‚Ä¢ Usar dise√±o responsivo para m√≥viles.

‚úÖ 4. Validaciones necesarias
‚Ä¢ Validar el campo del plan seleccionado ('monthly' | 'yearly') con zod.
‚Ä¢ Validar que el usuario tenga login activo antes de permitir pagar.
‚Ä¢ Validar si ya us√≥ la prueba gratuita.

‚úÖ 5. API simulada (si aplica)
‚Ä¢ Si no hay backend real, se pueden simular los endpoints /api/stripe/create-checkout-session, /api/stripe/cancel-subscription y /api/user/update-status.
‚Ä¢ Simular la persistencia con LocalStorage y fetchMock.

‚úÖ 6. Integraci√≥n con el resto de la app
‚Ä¢ El estado del usuario (premium, trial, free) se debe centralizar (ej. useAuth o useUserContext).
‚Ä¢ Las secciones ‚Äúpremium‚Äù deben usar un componente wrapper tipo {children} que condicione el acceso.

‚∏ª

‚ö†Ô∏è Consideraciones y Restricciones
‚Ä¢ No usar librer√≠as adicionales fuera de las mencionadas.
‚Ä¢ Usar tipado estricto en TypeScript (as const, enum, etc.).
‚Ä¢ C√≥digo claro, modular y documentado.
‚Ä¢ Compatible con Next.js App Router.
‚Ä¢ Integrar con shadcn/ui para toda la UI interactiva.