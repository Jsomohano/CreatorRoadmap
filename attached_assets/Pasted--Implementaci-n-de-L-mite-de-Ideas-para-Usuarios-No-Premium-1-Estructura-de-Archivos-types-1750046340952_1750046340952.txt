# Implementación de Límite de Ideas para Usuarios No Premium

## 1. Estructura de Archivos

```typescript
// client/src/hooks/useIdeaQuota.ts
import { useQuery } from '@tanstack/react-query';
import { z } from 'zod';

const ideaCountSchema = z.object({
  count: z.number().int().min(0)
});

export const useIdeaQuota = (creatorId: string) => {
  return useQuery({
    queryKey: ['ideaQuota', creatorId],
    queryFn: async () => {
      const response = await fetch(`/api/creators/${creatorId}/idea-count`);
      const data = await response.json();
      return ideaCountSchema.parse(data);
    }
  });
};

// client/src/components/IdeaLimitNotice.tsx
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { useTranslation } from "react-i18next";
import { useIdeaQuota } from "@/hooks/useIdeaQuota";

interface IdeaLimitNoticeProps {
  creatorId: string;
  isPremium: boolean;
}

export const IdeaLimitNotice = ({ creatorId, isPremium }: IdeaLimitNoticeProps) => {
  const { t } = useTranslation();
  const { data: quota } = useIdeaQuota(creatorId);
  
  if (isPremium || !quota || quota.count < 10) return null;

  return (
    <Alert variant="destructive" className="mb-4">
      <AlertTitle>{t('idea_limit.title')}</AlertTitle>
      <AlertDescription>
        {t('idea_limit.description')}
      </AlertDescription>
    </Alert>
  );
};

// Modificación de NewIdeaForm.tsx
import { useIdeaQuota } from "@/hooks/useIdeaQuota";
import { IdeaLimitNotice } from "@/components/IdeaLimitNotice";

export const NewIdeaForm = ({ creatorId, isPremium }: NewIdeaFormProps) => {
  const { t } = useTranslation();
  const { data: quota } = useIdeaQuota(creatorId);
  
  const isLimitReached = !isPremium && quota?.count >= 10;

  return (
    <div>
      <IdeaLimitNotice creatorId={creatorId} isPremium={isPremium} />
      <form onSubmit={handleSubmit}>
        <input
          disabled={isLimitReached}
          // ... resto de props
        />
        <button
          disabled={isLimitReached}
          // ... resto de props
        >
          {t('new_idea.submit')}
        </button>
      </form>
    </div>
  );
};
```

## 2. Traducciones (i18n)

```json
// client/src/locales/es/translation.json
{
  "idea_limit": {
    "title": "Límite de ideas alcanzado",
    "description": "Has alcanzado el límite de 10 ideas. ¡Actualiza a premium para crear más ideas!"
  },
  "new_idea": {
    "submit": "Crear idea",
    "limit_reached": "Límite alcanzado"
  }
}

// client/src/locales/en/translation.json
{
  "idea_limit": {
    "title": "Idea limit reached",
    "description": "You've reached the 10 ideas limit. Upgrade to premium to create more ideas!"
  },
  "new_idea": {
    "submit": "Create idea",
    "limit_reached": "Limit reached"
  }
}
```

## 3. API Endpoint

```typescript
// server/src/routes/creators.ts
import { z } from 'zod';
import { router, publicProcedure } from '../trpc';

export const creatorsRouter = router({
  getIdeaCount: publicProcedure
    .input(z.object({ creatorId: z.string() }))
    .query(async ({ input, ctx }) => {
      const count = await ctx.prisma.idea.count({
        where: {
          creatorId: input.creatorId,
          status: 'PUBLIC'
        }
      });
      
      return { count };
    })
});
```

## 4. Validaciones Zod

```typescript
// client/src/lib/validations/idea.ts
import { z } from 'zod';

export const ideaQuotaSchema = z.object({
  count: z.number().int().min(0).max(10)
});

export const newIdeaSchema = z.object({
  title: z.string().min(1).max(100),
  description: z.string().min(1).max(500),
  // ... otros campos
});
```

## 5. Consideraciones de Implementación

1. **Manejo de Estado**:
   - Usar React Query para cachear y revalidar el conteo de ideas
   - Implementar optimistic updates al crear/aceptar ideas

2. **Accesibilidad**:
   - Añadir aria-labels y roles apropiados
   - Asegurar que los mensajes sean claros y accesibles

3. **Rendimiento**:
   - Implementar debounce en las validaciones
   - Usar memoización donde sea necesario

4. **Testing**:
   - Unit tests para el hook useIdeaQuota
   - Integration tests para el flujo completo
   - E2E tests para el límite de ideas

## 6. Pasos de Implementación

1. Crear el endpoint de API
2. Implementar el hook useIdeaQuota
3. Crear el componente IdeaLimitNotice
4. Modificar NewIdeaForm
5. Añadir traducciones
6. Implementar validaciones
7. Añadir tests
8. Realizar pruebas de integración

## 7. Consideraciones de UX

1. Mostrar el contador de ideas actual
2. Feedback visual claro cuando se alcanza el límite
3. CTA claro para actualizar a premium
4. Mensajes de error descriptivos
5. Loading states apropiados

## 8. Seguridad

1. Validar permisos en el backend
2. Sanitizar inputs
3. Rate limiting en el endpoint
4. Validación de sesión