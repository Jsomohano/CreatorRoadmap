import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { ChevronUp } from "lucide-react"

export default function RankingPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 to-pink-50 dark:from-gray-950 dark:to-gray-900">
      <div className="container px-4 py-10 mx-auto max-w-4xl">
        <header className="mb-10 text-center">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-pink-500 via-purple-500 to-indigo-500 bg-clip-text text-transparent">
            Ranking de Ideas
          </h1>
          <p className="mt-2 text-gray-600 dark:text-gray-300">
            Vota por tus ideas favoritas para ayudarme a decidir mi próximo contenido
          </p>
        </header>

        <div className="space-y-4">
          {contentIdeas.map((idea, index) => (
            <RankingCard
              key={index}
              rank={index + 1}
              title={idea.title}
              description={idea.description}
              votes={idea.votes}
              color={idea.color}
            />
          ))}
        </div>
      </div>
    </div>
  )
}

function RankingCard({ rank, title, description, votes, color }) {
  // Define gradient classes based on color
  const gradientClasses = {
    purple: "bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600",
    pink: "bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-600 hover:to-rose-600",
    blue: "bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600",
    green: "bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600",
    orange: "bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600",
  }

  const gradientClass = gradientClasses[color] || gradientClasses.purple

  return (
    <Card className="overflow-hidden border-0 shadow-md hover:shadow-lg transition-all duration-300">
      <div className="flex items-stretch">
        {/* Rank indicator */}
        <div className={`flex items-center justify-center w-16 text-white font-bold text-xl ${gradientClass}`}>
          #{rank}
        </div>

        {/* Content */}
        <div className="flex-1 p-4">
          <h3 className="text-lg font-bold">{title}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-300 line-clamp-2 mt-1">{description}</p>
        </div>

        {/* Vote section */}
        <div className="flex flex-col items-center justify-center px-4 border-l border-gray-100 dark:border-gray-800">
          <Button className={`rounded-full w-12 h-12 text-white ${gradientClass}`} aria-label="Votar">
            <ChevronUp className="w-6 h-6" />
          </Button>
          <span className="mt-1 font-bold text-lg">{votes}</span>
        </div>
      </div>
    </Card>
  )
}

// Sample data
const contentIdeas = [
  {
    title: "10 Trucos de React que Cambiarán tu Forma de Programar",
    description: "Descubre técnicas avanzadas de React que harán que tu código sea más limpio y eficiente.",
    votes: 247,
    color: "purple",
  },
  {
    title: "Cómo Crear un Juego Multijugador con WebSockets",
    description: "Aprende a construir un juego en tiempo real desde cero utilizando WebSockets y Canvas.",
    votes: 189,
    color: "blue",
  },
  {
    title: "Guía Completa de CSS Grid en 2025",
    description: "Todo lo que necesitas saber sobre CSS Grid con ejemplos prácticos y las últimas características.",
    votes: 156,
    color: "pink",
  },
  {
    title: "Mi Configuración de Desarrollo y Herramientas de Productividad",
    description: "Un recorrido por mi entorno de desarrollo completo, incluyendo hardware, software y extensiones.",
    votes: 132,
    color: "green",
  },
  {
    title: "Construyendo una Aplicación Full-Stack con Next.js y Supabase",
    description: "Sigue paso a paso mientras construyo una aplicación completa con autenticación y base de datos.",
    votes: 118,
    color: "orange",
  },
]